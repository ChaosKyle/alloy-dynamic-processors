# Default values for alloy-dynamic-processors
# This is a YAML-formatted file.

# Global configuration
global:
  # Image registry and tag
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: ""
  
# Grafana Alloy configuration
alloy:
  # Image configuration
  image:
    registry: docker.io
    repository: grafana/alloy
    tag: "latest"
    pullPolicy: IfNotPresent
    pullSecrets: []
  
  # Deployment configuration
  replicaCount: 1
  
  # Configuration selection
  config:
    # Which Alloy configuration to use
    # Options: basic, enhanced-with-sort, multi-tenant, production
    type: "enhanced-with-sort"
    
    # Custom configuration (overrides type if provided)
    custom: ""
    
    # Environment variables for Alloy
    env:
      APP_NAME: "alloy-otel-lab"
      APP_VERSION: "1.0.0"
      ENVIRONMENT: "production"
      SERVICE_NAMESPACE: "monitoring"
      LOG_LEVEL: "info"
      
      # Kubernetes-specific
      NODE_NAME: ""  # Will be set via fieldPath
      K8S_CLUSTER_NAME: "k8s-cluster"
      CLOUD_REGION: "us-west-2"
      
      # Resource detection
      ENABLE_RESOURCE_DETECTION: "true"
      DETECT_DOCKER: "true"
      DETECT_SYSTEM: "true"
      DETECT_PROCESS: "true"
  
  # Resource configuration
  resources:
    limits:
      cpu: 1000m
      memory: 2Gi
    requests:
      cpu: 500m
      memory: 1Gi
  
  # Node selection
  nodeSelector: {}
  tolerations: []
  affinity: {}
  
  # Security context
  securityContext:
    runAsNonRoot: false  # Alloy needs root for Docker socket access
    runAsUser: 0
    fsGroup: 0
  
  # Pod security context
  podSecurityContext:
    fsGroup: 0
  
  # Service configuration
  service:
    type: ClusterIP
    ports:
      http: 12345      # Alloy HTTP server
      otlp-grpc: 4317  # OTLP gRPC
      otlp-http: 4318  # OTLP HTTP
      health: 13133    # Health check
      metrics: 8889    # Prometheus metrics
      zpages: 55679    # zPages
      pprof: 1777      # pprof
    annotations: {}
  
  # Persistence for Alloy data
  persistence:
    enabled: true
    storageClass: ""
    accessMode: ReadWriteOnce
    size: 10Gi
    annotations: {}
  
  # Liveness and readiness probes
  livenessProbe:
    httpGet:
      path: /-/healthy
      port: http
    initialDelaySeconds: 30
    periodSeconds: 30
    timeoutSeconds: 10
    failureThreshold: 3
  
  readinessProbe:
    httpGet:
      path: /-/ready
      port: http
    initialDelaySeconds: 15
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3

# Grafana Cloud configuration
grafanaCloud:
  # Enable Grafana Cloud integration
  enabled: true
  
  # Grafana Cloud credentials (use existing secret or create new)
  credentials:
    # Use existing secret
    existingSecret: ""
    
    # Or provide values directly (not recommended for production)
    instanceId: ""
    apiKey: ""
    
    # Grafana Cloud URLs
    prometheusUrl: "https://prometheus-prod-01-eu-west-0.grafana.net/api/prom/push"
    tempoUrl: "https://tempo-prod-04-eu-west-0.grafana.net:443"
    lokiUrl: "https://logs-prod-006.grafana.net/loki/api/v1/push"

# Service Monitor for Prometheus Operator
serviceMonitor:
  enabled: true
  namespace: ""
  interval: 30s
  scrapeTimeout: 10s
  labels: {}
  annotations: {}

# RBAC configuration
rbac:
  # Create RBAC resources
  create: true
  
  # Rules for service account
  rules:
    - apiGroups: [""]
      resources: ["nodes", "nodes/proxy", "services", "endpoints", "pods"]
      verbs: ["get", "list", "watch"]
    - apiGroups: ["extensions", "networking.k8s.io"]
      resources: ["ingresses"]
      verbs: ["get", "list", "watch"]
    - apiGroups: [""]
      resources: ["configmaps"]
      verbs: ["get"]
    - nonResourceURLs: ["/metrics"]
      verbs: ["get"]

# Service Account
serviceAccount:
  # Create service account
  create: true
  
  # Service account name (if not created, uses existing)
  name: ""
  
  # Annotations for service account
  annotations: {}
  
  # Auto-mount service account token
  automountServiceAccountToken: true

# Ingress configuration
ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # cert-manager.io/cluster-issuer: letsencrypt-prod
  hosts:
    - host: alloy.example.com
      paths:
        - path: /
          pathType: Prefix
          port: http
  tls: []
    # - secretName: alloy-tls
    #   hosts:
    #     - alloy.example.com

# Horizontal Pod Autoscaler
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

# Pod Disruption Budget
podDisruptionBudget:
  enabled: false
  minAvailable: 1
  # maxUnavailable: 1

# Network Policy
networkPolicy:
  enabled: false
  ingress:
    - from: []
      ports:
        - protocol: TCP
          port: 4317
        - protocol: TCP
          port: 4318

# Local Prometheus (for development/testing)
prometheus:
  enabled: false
  server:
    persistentVolume:
      size: 20Gi
    resources:
      limits:
        cpu: 500m
        memory: 1Gi
      requests:
        cpu: 250m
        memory: 512Mi

# Local Grafana (for development/testing)  
grafana:
  enabled: false
  adminPassword: "admin"
  persistence:
    enabled: true
    size: 10Gi
  resources:
    limits:
      cpu: 200m
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 128Mi

# Additional labels for all resources
commonLabels: {}

# Additional annotations for all resources
commonAnnotations: {}

# AI Sorter configuration
aiSorter:
  # Enable AI sorter sidecar
  enabled: false
  
  # Image configuration
  image:
    repository: ghcr.io/chaoskyle/alloy-ai-sorter
    tag: latest
    pullPolicy: IfNotPresent
  
  # Deployment configuration
  replicaCount: 1
  
  # Resource configuration
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 250m
      memory: 256Mi
  
  # Security context
  securityContext:
    runAsNonRoot: true
    runAsUser: 1000
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: true
    capabilities:
      drop:
        - ALL
  
  # Pod security context
  podSecurityContext:
    runAsNonRoot: true
    runAsUser: 1000
    fsGroup: 1000
  
  # Pod annotations
  podAnnotations: {}
  
  # Image pull secrets
  imagePullSecrets: []
  
  # Service configuration
  service:
    type: ClusterIP
    port: 8000
  
  # Environment variables
  env: {}
  
  # Secret configuration for API keys
  secretName: "ai-sorter-secrets"
  secretKeyName: "grok-api-key"
  
  # Node selection
  nodeSelector: {}
  tolerations: []
  affinity: {}

# Multi-Tenant Configuration
multiTenant:
  # Enable multi-tenant support
  enabled: false
  
  # Global multi-tenant settings
  global:
    region: "us-west-2"
    processingRegion: "us-west-2"
    instanceType: "standard"
    
    # Default resource limits (applies to all tenants unless overridden)
    defaultQuotas:
      memoryLimitMib: 512
      spikeLimitMib: 128
      maxConcurrentStreams: 50
      batchSize: 512
      batchTimeout: "30s"
      retentionDays: 30
  
  # RBAC configuration for multi-tenant access
  rbac:
    enabled: true
    
    # Global RBAC settings
    clusterRoleEnabled: true
    namespaceIsolation: true
  
  # Network isolation between tenants
  networkIsolation:
    enabled: false
    defaultPolicy: "deny-all"
  
  # Namespace isolation
  namespaceIsolation:
    enabled: false
    namespacePrefix: "tenant-"
  
  # Cost attribution and billing
  costAttribution:
    enabled: true
    scrapeInterval: "30s"
    ruleInterval: "60s"
    billingInterval: "300s"
    
    # Cost model parameters
    cpuCostPerSecond: 0.0001
    memoryCostPerByte: 0.000000001
    networkCostPerByte: 0.0001
    storageCostPerByte: 0.00001
    
    # Alert thresholds
    highCostThreshold: 1.0
    lowEfficiencyThreshold: 85
    
    # Instance and infrastructure costs
    instanceType: "standard"
    costModel: "consumption"
  
  # Tenant definitions
  tenants:
    # Premium tier example tenant
    - id: "tenant-premium-1"
      name: "Premium Customer 1"
      tier: "premium"
      organization: "acme-corp"
      region: "us-west-2"
      
      # Premium tier quotas (high performance)
      quotas:
        memoryLimitMib: 2048
        spikeLimitMib: 512
        maxConcurrentStreams: 200
        batchSize: 2048
        batchTimeout: "5s"
        retentionDays: 90
      
      # Cost center information
      costCenter:
        id: "cc-premium-001"
        department: "engineering"
        project: "platform-monitoring"
        billingAccount: "premium-billing"
      
      # RBAC configuration
      rbac:
        enabled: true
        users:
          - name: "premium.admin@acme-corp.com"
          - name: "premium.ops@acme-corp.com"
        groups:
          - name: "premium-ops-team"
        serviceAccounts:
          - name: "premium-workload-sa"
            namespace: "tenant-premium-1"
      
      # Routing configuration
      routing:
        dedicatedReceiver:
          enabled: true
          grpcPort: 4317
          httpPort: 4318
        
        exporters:
          tempo:
            endpoint: "https://tempo-premium.grafana.net:443"
            auth:
              secretName: "premium-grafana-auth"
              usernameKey: "username"
              passwordKey: "password"
          loki:
            endpoint: "https://logs-premium.grafana.net/loki/api/v1/push"
            auth:
              secretName: "premium-grafana-auth"
              usernameKey: "username"
              passwordKey: "password"
      
      # Data filtering
      filtering:
        allowedNamespaces:
          - "tenant-premium-1"
          - "premium-apps"
        customRules:
          - type: "allow"
            pattern: "service.name=premium-*"
      
      # SLA targets
      sla:
        targetLatencyMs: 100
        targetAvailability: 99.99
        targetThroughputRps: 10000
      
      # Monitoring configuration
      monitoring:
        enabled: true
        alerting:
          enabled: true
          webhooks:
            - url: "https://alerts.acme-corp.com/webhook"
              secretName: "premium-alert-webhook"
    
    # Enterprise tier example tenant
    - id: "tenant-enterprise-1"
      name: "Enterprise Customer 1"
      tier: "enterprise"
      organization: "enterprise-corp"
      
      # Enterprise tier quotas
      quotas:
        memoryLimitMib: 1024
        spikeLimitMib: 256
        maxConcurrentStreams: 100
        batchSize: 1024
        batchTimeout: "10s"
        retentionDays: 60
      
      costCenter:
        id: "cc-enterprise-001"
        department: "devops"
        project: "observability"
        billingAccount: "enterprise-billing"
      
      rbac:
        enabled: true
        users:
          - name: "enterprise.admin@enterprise-corp.com"
        groups:
          - name: "enterprise-devops"
      
      # Shared routing (no dedicated receiver)
      routing:
        exporters:
          tempo:
            endpoint: "https://tempo-enterprise.grafana.net:443"
            auth:
              secretName: "enterprise-grafana-auth"
              usernameKey: "username"
              passwordKey: "password"
      
      filtering:
        allowedNamespaces:
          - "tenant-enterprise-1"
          - "enterprise-apps"
      
      sla:
        targetLatencyMs: 250
        targetAvailability: 99.9
        targetThroughputRps: 5000
      
      monitoring:
        enabled: true
        alerting:
          enabled: true
    
    # Basic tier example tenant
    - id: "tenant-basic-1"
      name: "Basic Customer 1"
      tier: "basic"
      organization: "basic-corp"
      
      # Basic tier quotas (cost-optimized)
      quotas:
        memoryLimitMib: 512
        spikeLimitMib: 128
        maxConcurrentStreams: 50
        batchSize: 512
        batchTimeout: "30s"
        retentionDays: 30
      
      costCenter:
        id: "cc-basic-001"
        department: "operations"
        project: "monitoring"
        billingAccount: "basic-billing"
      
      rbac:
        enabled: true
        users:
          - name: "basic.admin@basic-corp.com"
      
      # Shared endpoints for basic tier
      routing:
        exporters:
          tempo:
            endpoint: "https://tempo-basic.grafana.net:443"
            auth:
              secretName: "basic-grafana-auth"
              usernameKey: "username"
              passwordKey: "password"
      
      filtering:
        allowedNamespaces:
          - "tenant-basic-1"
      
      sla:
        targetLatencyMs: 1000
        targetAvailability: 99.5
        targetThroughputRps: 1000
      
      monitoring:
        enabled: true
        alerting:
          enabled: false  # Basic tier has limited alerting
    
    # Development tier example tenant
    - id: "tenant-dev-1"
      name: "Development Environment"
      tier: "development"
      organization: "internal"
      
      # Minimal quotas for development
      quotas:
        memoryLimitMib: 256
        spikeLimitMib: 64
        maxConcurrentStreams: 25
        batchSize: 100
        batchTimeout: "60s"
        retentionDays: 7
      
      costCenter:
        id: "cc-dev-001"
        department: "engineering"
        project: "development"
        billingAccount: "internal"
      
      rbac:
        enabled: false  # Development has relaxed RBAC
      
      routing:
        exporters:
          tempo:
            endpoint: "https://tempo-dev.grafana.net:443"
            auth:
              secretName: "dev-grafana-auth"
              usernameKey: "username"
              passwordKey: "password"
      
      filtering:
        allowedNamespaces:
          - "dev"
          - "development"
          - "staging"
      
      sla:
        targetLatencyMs: 5000
        targetAvailability: 95.0
        targetThroughputRps: 100
      
      monitoring:
        enabled: false  # Minimal monitoring for dev
        alerting:
          enabled: false

# Enterprise Authentication Service
enterpriseAuth:
  # Enable enterprise authentication service
  enabled: false
  
  # Image configuration
  image:
    repository: ghcr.io/chaoskyle/alloy-auth-service
    tag: "2.2.0"
    pullPolicy: IfNotPresent
  
  # Deployment configuration
  replicaCount: 2
  
  # Service configuration
  service:
    type: ClusterIP
    port: 8080
    targetPort: http
    annotations: {}
  
  # Ingress configuration for authentication endpoints
  ingress:
    enabled: true
    className: "nginx"
    annotations:
      nginx.ingress.kubernetes.io/rewrite-target: /
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
      cert-manager.io/cluster-issuer: "letsencrypt-prod"
    hosts:
    - host: auth.example.com
      paths:
      - path: /
        pathType: Prefix
    tls:
    - secretName: auth-service-tls
      hosts:
      - auth.example.com
  
  # Resource configuration
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 250m
      memory: 256Mi
  
  # Autoscaling configuration
  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 10
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80
  
  # Security context
  securityContext:
    runAsNonRoot: true
    runAsUser: 1000
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: true
    capabilities:
      drop:
      - ALL
  
  # Pod security context
  podSecurityContext:
    runAsNonRoot: true
    runAsUser: 1000
    fsGroup: 1000
  
  # Health check configuration
  livenessProbe:
    initialDelaySeconds: 30
    periodSeconds: 30
    timeoutSeconds: 10
    failureThreshold: 3
  
  readinessProbe:
    initialDelaySeconds: 15
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
  
  # LDAP configuration
  ldap:
    serverUri: "ldaps://ldap.company.com:636"
    bindDn: "CN=service-account,OU=Service Accounts,DC=company,DC=com"
    bindPassword: "service-password"  # Use secret in production
    userSearchBase: "OU=Users,DC=company,DC=com"
    groupSearchBase: "OU=Groups,DC=company,DC=com"
    useTls: true
    timeout: 30
    
    # Attribute mapping for user information
    attributeMapping:
      userId: "sAMAccountName"
      displayName: "displayName"
      email: "mail"
      firstName: "givenName"
      lastName: "sn"
      department: "department"
      title: "title"
      employeeId: "employeeID"
  
  # SAML configuration
  saml:
    # Service Provider (SP) configuration
    sp:
      entityId: "urn:alloy:auth-service"
      acsUrl: "https://auth.company.com/auth/saml/acs"
      slsUrl: "https://auth.company.com/auth/saml/sls"
      x509Cert: ""  # SP certificate
      privateKey: ""  # SP private key
    
    # Identity Provider (IdP) configuration
    idp:
      entityId: "urn:company:idp"
      ssoUrl: "https://idp.company.com/saml/sso"
      slsUrl: "https://idp.company.com/saml/sls"
      x509Cert: ""  # IdP certificate
    
    # Security settings
    wantAssertionsSigned: true
    wantNameIdEncrypted: false
    wantAssertionsEncrypted: false
    signMetadata: true
    signAuthenticationRequests: true
    
    # Attribute mapping
    attributeMapping:
      userId: "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name"
      email: "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress"
      displayName: "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/displayname"
      firstName: "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/givenname"
      lastName: "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/surname"
      groups: "http://schemas.microsoft.com/ws/2008/06/identity/claims/groups"
  
  # JWT configuration
  jwt:
    algorithm: "HS256"  # or RS256 for asymmetric
    accessTokenExpireMinutes: 60
    refreshTokenExpireDays: 7
    audience: "alloy-observability"
    issuer: "alloy-auth-service"
  
  # RBAC configuration
  rbac:
    # Default roles are defined in the service
    # Additional group mappings
    groupRoleMapping:
      "Domain Admins": ["system_admin"]
      "Observability Admins": ["tenant_admin"]
      "SRE Team": ["sre"]
      "Engineering": ["developer"]
      "Security Team": ["security_auditor"]
      "Finance Team": ["finance_analyst"]
      "All Users": ["viewer"]
    
    # Custom roles (optional)
    customRoles: []
    
    # Policy rules (optional)
    policies: []
  
  # Database configuration
  database:
    # Main authentication database
    url: "postgresql://auth:password@postgres:5432/auth"
    
    # Audit database (can be same as main)
    auditUrl: "postgresql://auth:password@postgres:5432/auth_audit"
    
    # Connection settings
    poolSize: 5
    maxOverflow: 10
  
  # Redis configuration for token blacklist
  redis:
    url: "redis://redis:6379"
    keyPrefix: "auth:blacklist:"
  
  # Audit configuration
  audit:
    retentionDays: 90
    logFile: "/var/log/auth-audit.log"
    enableComplianceLogging: true
  
  # Pod annotations
  podAnnotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8080"
    prometheus.io/path: "/metrics"
  
  # Node selection
  nodeSelector: {}
  tolerations: []
  affinity: {}
  
  # Additional volumes and volume mounts
  volumes: []
  volumeMounts: []
  
  # Image pull secrets
  imagePullSecrets: []
  
  # Debug mode
  debug: false
  
  # Service monitor for Prometheus
  serviceMonitor:
    enabled: true
    interval: 30s
    scrapeTimeout: 10s
    labels: {}

# Test pods configuration
tests:
  enabled: true
  image:
    registry: docker.io
    repository: curlimages/curl
    tag: "latest"
    pullPolicy: IfNotPresent