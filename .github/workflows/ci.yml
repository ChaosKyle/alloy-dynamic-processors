name: CI

on:
  push:
    branches: [ "main", "feature/*" ]
  pull_request:
    branches: [ "main" ]

jobs:
  test-ai-sorter:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('alloy/processors/ai_sorter/requirements.txt') }}
        
    - name: Install dependencies
      working-directory: alloy/processors/ai_sorter
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run tests
      working-directory: alloy/processors/ai_sorter
      run: |
        pytest test_ai_sorter.py -v --tb=short
        
    - name: Test Docker build
      working-directory: alloy/processors/ai_sorter
      run: |
        docker build -t test-ai-sorter .
        
  validate-helm:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Helm
      uses: azure/setup-helm@v4
      with:
        version: '3.14.0'
        
    - name: Lint Helm chart
      working-directory: alloy/helm/alloy-dynamic-processors
      run: |
        helm lint .
        
    - name: Template Helm chart
      working-directory: alloy/helm/alloy-dynamic-processors
      run: |
        helm template test-release . --set aiSorter.enabled=true > /tmp/test-manifests.yaml
        
    - name: Validate Kubernetes manifests
      run: |
        # Basic validation that manifests are valid YAML
        python -c "import yaml; yaml.safe_load_all(open('/tmp/test-manifests.yaml'))"
        
  validate-alloy-config:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
        
    - name: Install Alloy
      run: |
        go install github.com/grafana/alloy/cmd/alloy@latest
        
    - name: Validate Alloy configuration syntax
      run: |
        echo "üîç Validating Alloy configuration syntax..."
        exit_code=0
        
        for config in alloy/configs/*.river; do
          echo "Validating $(basename $config)..."
          if alloy fmt --verify "$config"; then
            echo "‚úÖ $(basename $config) syntax is valid"
          else
            echo "‚ùå $(basename $config) has syntax errors"
            exit_code=1
          fi
        done
        
        if [ $exit_code -ne 0 ]; then
          echo "Configuration validation failed!"
          exit 1
        fi
        echo "All Alloy configurations passed syntax validation!"
        
    - name: Test Alloy configuration conversion
      run: |
        echo "üîÑ Testing Alloy configuration conversion..."
        
        # Test that configurations can be processed
        for config in alloy/configs/*.river; do
          echo "Testing conversion for $(basename $config)..."
          if alloy convert --source-format=alloy --target-format=alloy "$config" > /dev/null; then
            echo "‚úÖ $(basename $config) conversion successful"
          else
            echo "‚ùå $(basename $config) conversion failed"
            exit 1
          fi
        done
        
    - name: Validate configuration completeness
      run: |
        echo "üîé Validating configuration completeness..."
        
        # Check that all configurations have required components
        for config in alloy/configs/*.river; do
          echo "Checking completeness of $(basename $config)..."
          
          # Check for essential components
          if ! grep -q "otelcol.receiver" "$config"; then
            echo "‚ùå $(basename $config) missing receiver configuration"
            exit 1
          fi
          
          if ! grep -q "otelcol.exporter" "$config"; then
            echo "‚ùå $(basename $config) missing exporter configuration"
            exit 1
          fi
          
          echo "‚úÖ $(basename $config) has required components"
        done
        
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: 'alloy/processors/ai_sorter'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'